#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM 5

sem_t forks[NUM];     // One semaphore per fork
sem_t mutex;          // For mutual exclusion (optional for output)

void* philosopher(void* num) {
    int id = *(int*)num;
    int left = id;
    int right = (id + 1) % NUM;

    while (1) {
        // Thinking
        sem_wait(&mutex);
        printf("Philosopher %d is thinking.\n", id);
        sem_post(&mutex);
        sleep(1);

        // Pick up forks (wait)
        sem_wait(&forks[left]);
        sem_wait(&forks[right]);

        // Eating
        sem_wait(&mutex);
        printf("Philosopher %d is eating.\n", id);
        sem_post(&mutex);
        sleep(2);

        // Put down forks (signal)
        sem_post(&forks[left]);
        sem_post(&forks[right]);

        // Done eating
        sem_wait(&mutex);
        printf("Philosopher %d put down forks and is thinking again.\n", id);
        sem_post(&mutex);
        sleep(1);
    }
}

int main() {
    pthread_t threads[NUM];
    int philosopherIds[NUM];

    sem_init(&mutex, 0, 1);
    for (int i = 0; i < NUM; i++) {
        sem_init(&forks[i], 0, 1);
    }

    for (int i = 0; i < NUM; i++) {
        philosopherIds[i] = i;
        pthread_create(&threads[i], NULL, philosopher, &philosopherIds[i]);
    }

    for (int i = 0; i < NUM; i++) {
        pthread_join(threads[i], NULL);
    }

    for (int i = 0; i < NUM; i++) {
        sem_destroy(&forks[i]);
    }
    sem_destroy(&mutex);

    return 0;
}

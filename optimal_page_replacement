#include <stdio.h>
#include <stdbool.h>

int search(int key, int frame[], int frameCount) {
    for (int i = 0; i < frameCount; i++) {
        if (frame[i] == key)
            return i;
    }
    return -1;
}

int predict(int pages[], int frame[], int n, int index, int frameCount) {
    int res = -1, farthest = index;
    for (int i = 0; i < frameCount; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }

        if (j == n) // If page not found in future
            return i;
    }
    return (res == -1) ? 0 : res;
}

void optimalPageReplacement(int pages[], int n, int frameCount) {
    int frame[frameCount];
    int pageFaults = 0;
    int pageHits = 0;

    for (int i = 0; i < frameCount; i++)
        frame[i] = -1;

    for (int i = 0; i < n; i++) {
        if (search(pages[i], frame, frameCount) != -1) {
            pageHits++;
            continue;
        }

        int j;
        for (j = 0; j < frameCount; j++) {
            if (frame[j] == -1) {
                frame[j] = pages[i];
                pageFaults++;
                break;
            }
        }

        if (j == frameCount) {
            int pos = predict(pages, frame, n, i + 1, frameCount);
            frame[pos] = pages[i];
            pageFaults++;
        }
    }

    printf("Total Page Hits: %d\n", pageHits);
    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    int n, frameCount;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    int pages[n];
    printf("Enter page reference string:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter number of frames: ");
    scanf("%d", &frameCount);

    optimalPageReplacement(pages, n, frameCount);

    return 0;
}
